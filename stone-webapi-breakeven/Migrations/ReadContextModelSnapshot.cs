// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stone_webapi_breakeven.Data;

#nullable disable

namespace stonewebapibreakeven.Migrations
{
    [DbContext(typeof(ReadContext))]
    partial class ReadContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("stone_webapi_breakeven.Models.AccountBanking", b =>
                {
                    b.Property<int>("AccountBankingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("OpentedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("WalletId1")
                        .HasColumnType("int");

                    b.HasKey("AccountBankingId");

                    b.HasIndex("WalletId1");

                    b.ToTable("AccountsBanking");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double?>("AverageTicket")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PercentageEvolution")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int?>("Quantify")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.Wallet", b =>
                {
                    b.Property<int>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Balance")
                        .HasColumnType("double");

                    b.Property<double?>("FreeAmount")
                        .HasColumnType("double");

                    b.Property<double?>("InvestedAmount")
                        .HasColumnType("double");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("double");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.AccountBanking", b =>
                {
                    b.HasOne("stone_webapi_breakeven.Models.Wallet", "WalletId")
                        .WithMany()
                        .HasForeignKey("WalletId1");

                    b.Navigation("WalletId");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.Product", b =>
                {
                    b.HasOne("stone_webapi_breakeven.Models.Wallet", null)
                        .WithMany("Products")
                        .HasForeignKey("WalletId");
                });

            modelBuilder.Entity("stone_webapi_breakeven.Models.Wallet", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
